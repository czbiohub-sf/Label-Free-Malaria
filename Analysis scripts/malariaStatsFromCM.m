

function stats = malariaStatsFromCM(cm, assertIsTransposed)

% This function generates a struct object with the following fields, 
% all in units of percent (%):

% Type: Type of statistic being reported. Exs:
%       OvAcc = Overall Accuracy
%       FPR = False Positive Rate
%       Recall
%       Prec = Precision
%       CErr = Sample Composition Error

% cm is a confusion matrix, as generated by Matlab's confusionmat function.
% However, we transpose to match the orientation when viewing
% "plotconfusion", which requires a transpose operation. 

% assertIsTransposed is a bool asserting whether the provided cm has
% already been transposed or not. 


if nargin < 2 || isempty(assertIsTransposed)
    assertIsTransposed = false;
    warning('User did not provide transpose assertion. Assuming false.');
end

if nargin < 1
    error('No cm provided');
end

% Transpose, if appropriate
if ~assertIsTransposed
    cm = cm';
end

stats.AllOvAcc = 100*trace(cm)/sum(cm(:));
stats.RingFpr = 100*cm(2,1)/cm(1,1);
stats.TrophFpr = 100*cm(4,1)/cm(1,1);
stats.SchizontFpr = 100*cm(3,1)/cm(1,1);
stats.HealthyRecall = 100*cm(1,1)/sum(cm(:,1));
stats.RingRecall = 100*cm(2,2)/sum(cm(:,2));
stats.TrophRecall = 100*cm(4,4)/sum(cm(:,4));
stats.SchizontRecall = 100*cm(3,3)/sum(cm(:,3));
stats.HealthyPrec = 100*cm(1,1)/sum(cm(1,:));
stats.RingPrec = 100*cm(2,2)/sum(cm(2,:));
stats.TrophPrec = 100*cm(4,4)/sum(cm(4,:));
stats.SchizontPrec = 100*cm(3,3)/sum(cm(3,:));
stats.AllCerr = 100*sqrt(mean(((sum(cm,2)-sum(cm,1))./sum(cm,1)).^2));
stats.HealthyCerr = 100*((sum(cm(1,:)) - sum(cm(:,1)))/sum(cm(:,1)));
stats.RingCerr = 100*((sum(cm(2,:)) - sum(cm(:,2)))/sum(cm(:,2)));
stats.TrophCerr = 100*((sum(cm(4,:)) - sum(cm(:,4)))/sum(cm(:,4)));
stats.SchizontCerr = 100*((sum(cm(3,:)) - sum(cm(:,3)))/sum(cm(:,3)));